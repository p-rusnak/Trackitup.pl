datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String   @id @default(uuid())
  username        String   @unique
  email           String   @unique
  password        String
  name            String?
  role            String
  isEmailVerified Boolean  @default(false)
  badges          String[] @default([])
  titles          String[] @default([])
  avatarUrl       String?
  scores          Score[]
  tokens          Token[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  ratings         Rating[]
  goal            Goal[]
  session         Session[]
}

model Token {
  id          Int      @id @default(autoincrement())
  token       String   @unique
  type        String
  expires     DateTime
  blacklisted Boolean  @default(false)
  userId      String
  user        User     @relation(fields: [userId], references: [id])
}

model Score {
  id        Int      @id @default(autoincrement())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  song_id   String
  diff      String
  grade     String?
  mode      String
  createdAt DateTime @default(now())
  sessionId Int?
  session   Session? @relation(fields: [sessionId], references: [id])
}

model Session {
  id        Int       @id @default(autoincrement())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  startedAt DateTime  @default(now())
  lastScore DateTime
  endedAt   DateTime?
  scores    Score[]

  @@index([userId, endedAt])
}

model Missing {
  id        Int      @id @default(autoincrement())
  song_name String
  diff      String
  createdAt DateTime @default(now())
}

model Rating {
  id        Int      @id @default(autoincrement())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  song_id   String
  diff      String
  value     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, song_id, diff])
}

model Goal {
  id        Int      @id @default(autoincrement())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  song_id   String
  diff      String
  mode      String
  createdAt DateTime @default(now())

  @@unique([userId, song_id, diff, mode])
}
